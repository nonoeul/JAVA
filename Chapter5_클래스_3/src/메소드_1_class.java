/*
 *		클래스 구성요소
 * 		----------------------------------
 * 		변수 : 프로그램 종료시까지 유지하는 변수 (전역변수,멤버변수)
 * 			  메소드 안에서 사용되는 변수 (지역변수)
 * 			  ------
 * 			  정수 : int, long
 * 			  실수 : double
 * 			  논리 : boolean
 * 			  참조 : 	데이터가 여러 개 (메모리 주소)
 * 			  		배열(1차원) ---- 같은 크기의 데이터형
 * 					클래스 : 다른 데이터형을 저장 가능하다.			

 * 		----------------------------------
 * 		생성자 : 변수에 초기화, 클래스에 메모리 저장시 사용
 * 		----------------------------------
 * 		메소드 : 기능을 수행, 다른 클래스와 연결 (메세지)
 * 				--------------연산자 / 제어문 (명령문)	
 * 		=> 1.  다른 클래스와 통신 
 * 		=> 2.  재사용 목적
 * 				------
 * 				기능을 최소화 (한개의 기능만을 수행)
 * 				예) 회원
 * 					= 회원 가입 
 * 					= 회원 수정
 * 					= 회원 탈퇴
 * 					= 로그인
 * 					= 로그아웃
 * 					= 아이디 찾기
 * 					= 비밀번호 찾기
 * 					===> 객체지향 (수정, 추가)
 * 					===> 우편번호 검색, 아이디 중복 
 * 
 * 					게시판
 * 					=글쓰기
 * 					=목록
 
 * 		----------------------------------
 * 
 * 	1. 메소드 형식
 * 		[접근지정어][옵션] 리턴형 메소드명(매개변수)
 * 		 public/private
 * 		[옵션]
 * 		static/final/abstract
 * 		[리턴형]
 * 
 * 	2. 메소드 종류
 * 		리턴형	매개변수
 * 		--------------
 * 		  O		  O
 * 		 String 이 많이 나온다.
 * 		 String substring(int s) 
 * 		 String replace(String s1, String s2) // 이런 원형을 잘아야한다. 
 * 		--------------
 * 		  O		  X
 * 		 String trim() = 공백을 제거해줘라.. 
 * 		 double random() = random은 임의에 추출하므로 random필요 없다. 
 * 		--------------
 * 		  X		  O
 * 		 void println(stirng s)
 * 		 void main(String[] arg)
 * 		 -------------- 결과값이 없는 경우
 * 		--------------
 * 		  X		  X
 * 		 void println() / 한 줄을 띄어라
 * 		 // 한줄 만 뛸 때 리턴형 / 매개변수 둘다 필요 없다. 
 * 		--------------
 * 		
 * 	3. 메소드 구성요소
 * 		= 리턴형 (처리 결과값) => 화면 출력 (데이터)
 * 		// 데이터가 출력해야될 게 여러 개일 경우 : 배열 / 클래스
 * 		
 * 		= 매개변수 (사용자 요청 값)
 * 		1. 여러개	: 3개 이상이면 => 배열 / 클래스
 * 		2. 한 개	: 기본형 
 * 		3. ex) aaa(int a,int b,int c,int d,int e)	
 * 		   es) aaa(int[]) 같은 데이터형이면 한 번에 묶어서 넘기는게 유리하다.
 * 		   매개변수는 3개 이상 들어가면 안 좋다.!! //  
 * 		
 * 		= 메소드명
 * 		1. 알파벳으로 시작한다. 대소문자 구분한다. 
 * 		2. 숫자사용 가능 앞에 사용 금지
 * 		3. 특수문자 사용이 가능 ( _ , $ )
 * 			_ : ex) _main 임시메소드를 만들 때 사용 된다.
 * 			_ : 단어가 2개 이상잉 때.
 * 				board_write(), boardWrite
 * 				board_insert, board_update, board_delete
 * 				단어2개구분 방법2 = noticeInsert 앞에 대문자로 구분해준다.
 * 			키워드 사용 금지 int/boolean
 * 			약속 : 소문자로 시작한다. 
 * 			------------------- 식별자
 * 			*** 변수는 같은 이름으로 사용이 불가능하다. 
 * 			*** 메소드는 같은 이름을 사용할 수도 있다.(오버로딩) 
 * 			+
 * 			(String, String)				
 * 			(double, double)				
 * 			(double, int)				
 * 			(char, int)				
 * 			(char, char)				
 * 			(int, int)
 * 
 * 			*** 매개변수(갯수를 알지 못하는 경우)
 * 			1. 장바구니 => 가변매개변수
 * 			   (Object..arg)
 */
public class 메소드_1_class {
	public static void main(String[] args) {
		// void println()
		
		System.out.printf("%d\n",10);
		System.out.printf("%d,%d\n",10,20);
		System.out.printf("%d,%d,%d\n",10,20,30);
		// 가변매개변수이다.
		// 몇 개를 쓸 지 알 수 업다. 배열[]함수처럼 갯수가 고정적이지 않다.
		Object o=10;
		o=10.5;
		o="";
		o='A';
		// printf(String format, Object... args) 
		// object 갯수는 가변적이다. 가변적으로 저장할 수 있ek	
		
		
	}
	
}




























