/*
 * 		1장 자바의 특징
 * 		------------
 * 		1) 특징
 * 		   = 운영체제의 독립적(모든 운영체제의 호환성이 좋다)
 * 			 예) 원도우에서 작성 => 리눅스
 * 			 C) 윈도우에서 작성 => 리눅스에서 사용 가능
 * 			 예) 윈도우에서 작성 => 컴파일 (컴퓨터가 읽을 수 있는 언어로)
 * 								.Obj
 * 								운영체체가 다르다
 * 			 C/C++ => 소스 ㅈ가성 ==> 컴파일
 * 					 			.class 운영체제마다 동일한 파일 생성  			
 * 			 **자바실행
 * 			 A.Java ========> A.Class ========> 실행화면출력
 * 					컴파일(javac) 바이트(2진법) 인터프리터(java)
 * 					두번의 검증을 거친다 (보안이 상당히 뛰어나다)
 * 					= 객체 지향 프로그램 (재사용이 편리한 상태) => 유지보수 
 * 					재사용 : 수정 , 추가 , 데이터 보호 (캡슐화) ===> 5장 
 * 						  -------------오버라이딩/오버로딩
						  포함 (수정할 내용이 없는 경우) => has-a
						  상속 (수정할 내용이 있는 경우) => is-a
 * 						  비교적 배우기 싶다 / C/C++에서 파생된 언어 
 * 						  C언어의 포인터(메모리구조).구조체,다중상속.지원하는 API가 미약하는 등 비교적 어렴			
 *		 				  => 자바 언어 => 강력한 API를 가지고 있다. (필요헌 가눙 아마 제작)	 	
 *						  => 조립식 (자바공부 => 직접구현)
 *						  => 자동 메모리 관리(가비지 컬렉션)
 *						  => 네트워크 / 분산 / 멀티쓰레드 기능을 가지고 있다.
 *		2. 소스 코딩 방법
 *		주석 : // => 번역이 안된다 (프로그래머만 보는 상태)
 *		프로그램은 명렁어 (JVM) => ;
 *		대소문자를 구분한다.
 *		{}을 사용한다.
 *		들여쓰기 
 *		== 구성요소
 *		1) 클래스명: 첫자는 대문자
 *		2) 변수: 소문자 시작
 *		3) 상수: 젠차가 대문자
 *		4) 메소드: 소문자
 *		5) 생성자: 클래스명과 동일
 *		== 공부
 *		1) 데이터 저장 방법 : 변수 / 상수 
 *		메모리 저장(메모리크기결정) => 기본형(데이터)
 *		사용자 정의 : 참조형(배열, 클래스)
 *		2) 데이터 가공// 연산자 / 제어문
 *		-- 기본문법
 *		3) 관련된 데이터 모아서 관리 : 배열
 *		4) 관련된 명령어 모아서 관리 : 메서드
 *		5) 데이터/명령문 동시에 관리 : 클래스 
 *		6) 객체지향
 *		7) 프로그램이 비정상 종료를 방지 / 오류를 처리 = 예외처리 
 *		-- 자바 기본
 *		8) 자바에서 지원하는 라이브러리
 *
 *		3. 자바의 구성
 *		package : 한번만 사용 => 위치
 *		import : 기존에 만들어진 클래스를 불러온다 (여러개)
 *		----
 *		class ClassName{
 *		---------------
 *		변수 설정
 *		---------------
 *		생성자
 *		---------------
 *		메소드
 *		---------------
 *		프로그램의 시작점
 *		public static void main(String[] arg)
 *		{
 *			기본문법
 *		}
 *	  	1. 기본형식 2. 활용 (알고리즘) 
 *
 *		*** 변수 : 변하는 수
 *		=> 한개의 데이터를 저장하는 메모리 공간
 *		=> 사용법
 *		   데이터형 변수명 = 값
 *		=> 변수명 식별자 : 변수 => 같은 이름을 사용할 수 없다.
 *		1) 일파벳, 한글로 시작 (알파벳은 대소문자를 구분)
 *		2) 숫자 사용이 가능하다 (단 앞에 사용 금지) 
 *		3) 특수문자 사용 가능 ( _ , $)
 *		4) 키워드는 사용할 수 없다. (자바에서 사용하는 단어)
 *		=> 빨간색으로 표현시 public static void, int 등
 *		5) 길이는 제한이 없다.
 *		   변수 => 의미 약간 부여 
 *		=================================   
 *		과일 가게에는 사과 5, 배 10. 바나나 7, 딸기 1
 *		저장시에는 반드시 앞에 메모리 크기 저장
 * 		기본형(자바에서 지원)
 * 		참조형(사용자 정의) => 배열 / 클래스 
 * 		=================================
 * 		기본형
 * 		====
 * 	정수 저장 방법
 * 		1 byte => byte a = 10 // a에다가 10값을 1바이트로 저장해달라 // 네트워크 전송, 파일읽기
 * 		2 byte => short // C언어와 혼합
 * 		4 byte => int // 평상시에 시용하는 모든 정수 (default) // 메모리 공간은 4바이트씩 
 * 		나눠져 있다. 바로 대입해서 쓸 수 있다. 
 * 		8 byte => long
 * 	실수 저장 방법
 * 		4 byte float ==> 소수점 6자리 
 * 		8 byte double (default) ==> 소수점 15자리
 * 		10.5F // 뒤에 F가 붙으면 float 안 붙으면 double 10.5(D), D생략가능 
 * 	문자 저장 방법
 * 		2byte = char
 * 			=> 1byte(single byte = ASC)/ 2byte(멀티바이트 = Unicode)
 * 			=> 한글당 바이트가 2byte
 *			 유니코드는 세계 각국의 언어를 통일된 방법으로 표현할 수 있게된 국제적인 코드규약이다.
 * 			 동양 3국의 한글, 한자 또는 일어 등과 같은 문자는 
 *			 1 byte로는 표현이 불가능하기에 2byte로 문자를 표현하는 유니코드가 만들어 졌다.
 * 			 c언어에서는 1byte(ASKII코드)를 가지고 있지만, 자바에서는유니코드( 2 byte 문자 체계)를 
 *			 사용하므로 2 byte의 크기를 가지고 있습니다.
 *		byte = bit(8) = 256문자
 *		byte = bit(16) = 65535문자
 * 	논리 저장 방법
 * 		true/false만 저장 => 1byte => boolean
 * 	자동 지정 (jdk 10 이상) 
 * 		var a = 10 / a:int
 * 		var b = 10.5 / b:double
 * 		var c = 'A' / c:char
 * 
 * 	저장이 가능한 데이터
 * 		byte = -128~127 // 이 범위 밖은 오류!
 * 		
 * 		1byte 2진법으로 저장된다
 * 		128 64  32  16  8   4   2   1(0)
 * 		0	1	1	1	1	1	1	1
 * 		64+32+16+8+4+2+1 = 127
 * 		부호비트(0:양수 / 1:음수)
 * 
 *		2byte = -32768~32767 => short
 *		
 *		4byte = -21억 4천 ~ 21억 4천 => int
 *
 *		8byte = long
 *		
 *		변수
 *		데이터형 변수명 = 값
 *		값을 부여 크기에 맞게 지정한다.
 *		int a = 10.5 ==> 오류
 *		int 4byte / 10.5 소수점까지 표현하는 double 8byte 
 *
 *		데이터형 크기
 *		byte < short / char < int < long < float < double 
 */
public class 변수 {
	public static void main(String[] args) {
		int ad;
		ad = 10;
		System.out.println(ad);
		// long a = 100000000000000; 오류 // 숫자가 int이기 때문이다.
		// 자바는 숫자만 쓰이면 무조권 int로 인식한다. 그래서 long을 쓰더라도 오류가 나온다.
		long a = 10000000000000l; // long을 써야할떄는 맨 뒤에 l을 넣어줘야 한다.
		long b = (long) 10.5; // 형변환
		int c = 123456;
		double d = 123456.78;
		int e = (int) ((d - c) * 100);
		System.out.println(e);
		byte byte_value = 127; // -128~127 / = 오른쪽에서 왼쪽이동 뒤에서부터 앞으로
		// 모든 숫자는 int인식
		short short_value = 32767; // -32768~32767
		int int_value = 2140000000;
		long long_value = 99999999999999999l;
		// int / long 구분 l자로 구분
		System.out.println(byte_value);
		char char_value = '홍';
		System.out.println(char_value);
		float float_value = 10.5f;
		// 실수일때는 자바가 자동으로 double로 인식 float로 쓸려면 뒤에 f붙힌다.
		double double_value = 10.5;
		System.out.println(double_value);
		boolean boolean_value = true;
		// 모든 정수는 int
		// 모든 실수는 double
		// 지역변수는 반드시 초기값을 부여한 후에 사용이 가능하다.
		/*
		 * 변수
		 * 		=멤버변수
		 * 		=공유변수
		 * 		-----------프로그램 종료시까지 메모리 유지
		 * 					=> 자동초기화
		 * 		=지역변수
		 * 		-----------블록이 종료되면 사라지는 변수
		 * 					=> 직접초기화
		 * 
		 * 		class{
		 * 		멤버변수/공유변수
		 * 		public static void main(String[] arg)
		 * 			{
		 * 		 지역변수() {}안에서만 사용 가능 => 반드시 초기화를 한다. 
		 *	 		}
		 * 		}
		 * 		변수 => 변경이 가능
		 * 		상수 => 변경할 수 없다(고정)
		 * 
		 * 		변수 => 데이터형 변수명 = 값 int a = 10;
		 * 		상수 => 데이터형 변수명 = 값 final int b= 20
		 */
		int kor=80;
		kor=90;
		kor=100;
		System.out.println(kor);
		
		final int SCORE=70; // 변수를 전부 대문자로써 상수와 변수를 구분해준다.
		// score = 100; final로 고정되어있는 상수이기떄문에 변경x
		// = 대입, == 같다, != 같지 않다 
		// Integer.MAX_VALUE 정수에서 가장 큰 값
		//	변수
		//	선언
		//	초기화
		// 	int a; (선언) a의 변수를 선언
		// 	a = 10; (초기화) a의 초기값을 10으로 설정
		/*
		 * => 선언과 동시에 최고하
		 * 	int a=10;
		 * 
		 * 	int a
		 * 	int b
		 * 	int c
		 * 	=====> int a,b,c;
		 * 	int 10
		 * 	int 20
		 * 	int 30
		 * 	=====> int 10, 20, 30;
		 *	// 단 모두 데이터형식이 똑같아야한다.!! 
		 */
		
	//자동 지정 변수
		var i=100;	// int
		var ch='A';	// char
		// 모두 형태가 정해져 있다. 다른 값을 대입할때도 형태에 맞게 
		ch=98; // char만 int와 호환 정수 넣을 수 있다.
		// char 은 a을 저장할때 65 정수형태로 저장하기 떄문에 
		System.out.println(ch);
		
		int a1=10;
		int b1=20;
		
		/*
		 * int a=100;
		 * a=200;	
		 * a=300;	
		 * a=400;	
		 * a=500;	
		 */
		
		
		
		
	}
}
