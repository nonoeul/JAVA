
/*
 * 
 * 	1. 클래스 구성요소
 * 	class ClassName
 * 	{
 * 		-------------------
 * 		1) 변수 설정
 * 		-------------------
 * 		3) 생성자 생성 => 필요시에만 사용
 *		------------------- 
 * 		2) 메소드 설정 
 * 		-------------------
 * 	}
 * 
 * 	1) 변수의 종류
 * 	 	-------------------
 * 		클래스 영역에 선언하는 변수 (멤버변수) ==== heap
 * 		= 인스턴스 변수 : new를 사용할때 저장되는 변수 (new설정에 따라 따로 저장)
 * 			= 클래스객체명, 변수명
 * 		Card c1=new Card()
 * 			= 변수 
 * 		= 인스턴스 변수 : new를 사용 
 * 		= 정적 변수
 * 		메소드 영역에 선언하는 변수 (지억변수) ==== stack
 * 		
 * 		1) 메소드 영역에 선언되는 변수
 * 		   void aaa()
 * 		   {
 * 				int a=10;
 * 		   }		
 * 		2) 매개변수
 * 		   void aaa(int a)
 * 		   {
 * 		   }
 * 
 * 		자바 메모리 구조
 * 		-------------------------------------------------------------
 * 		Method Area => method.static
 * 		-------------------------------------------------------------
 * 		stack : 메모리 자체에서 관리 (생성/소멸) => 블럭변수
 * 				매개변수 . 지역변수	
 * 				=> 자동으로 변수의 초기화가 안된다.(반드시 초기화를 시킨다음 사용해야 한다.)
 * 		-------------------------------------------------------------
 * 		Heap : 프로그래머 영역(프로그래머가 직접 메모리 크기를 만들어서 저장해준다.)
 * 			   자동 소멸이 안된다. => 가비지 컬렉션이 자동으로 없애줘야 한다. 
 * 		-------------------------------------------------------------
 * 		heap, method area => 변수 저장시에 자동 초기화 된다.
 * 		class ClassName{
 * 			int d:
 * 			boolean b:
 * 			char c;
 * 			long l;
 * 			String s
 * 		}
 * 
 * 			String s=""; // 값을 줘야한다. 값을 주지 않으면 null값이 된다. null에서 처리하면 오류가 발생한다.
 * 			int[] arr; 
 * 		-------------------------------------------------------------
 * 		변수 유형 		/ 선언 위치 		/ 메모리 저장 		/ 사용범위
 * 		-------------------------------------------------------------
 * 		인스턴스 변수 / 클래스블럭 		  new: 새로운 저장 공간 만든다.
 * 					 class ClassName  heap메모리에 저장 
 * 					 {
 * 					 int a;
 * 					 }
 * 		-------------------------------------------------------------
 * 		정적 변수	  / 클래스블럭			  컴파일시 자동 저장
 * 					class ClassName
 * 					{
 * 						static int a;
 * 						=> 많이 사용되는 변수는 아니다.
 * 					}
 * 		-------------------------------------------------------------
 * 		지역변수 		class	ClassName	메소드 호출시마다 메소드안에서만 사용 가능 
 * 					{
 * 						void display()
 * 						{
 * 							int a=10;
 * 						}
 * 					}
 * 					반드시 초기화 
 * 		------------------------------------------------------------------------
 * 		1) 메모리에 저장
 * 		   메모리에 저장된 상태 : 인스턴스 (객체)
 * 		   설계(어떤 데이터를 저장) ============> 메모리에 저장 ============> 활용 ============> 소멸(메모리 해제)
 * 		   class ClassName / class ClassName / c=new ClassName() c.변수명					
 * 											   ----------------- c.메소드명()
 * 													 생성자
 * 		{
 * 		   String s;		
 * 		   int a;
 * 		}
 * 
 * 		   String s="";
 * 		   s.substring()
 * 		   s.trim()
 * 			
 * 		   String ss="Java";
 * 		   s.substring()
 * 		   Scanner scan=new Scanner(System.in)
 * 		   scan.nextInt
 * 
 * 			*** 클래스는 한 개에 대한 정보 설계
 * 			맛집 : 5000개 
 * 			----------------- new
 * 
 * 
 * 
 * 
 */


class student
{
	String name;
	int kor;
	int eng;
	int math;
}

public class 사용자정의_데이터형_1 // 
{
	/*
	 * 	Student
	 * 	---------name
	 * 
	 * 	---------kor
	 * 
	 * 	---------eng
	 * 
	 * 	---------math
	 * 	
	 * 
	 */
	public static void main(String[] args) {
		student s1=new student();
		s1.name="홍길동";
		s1.kor=90;
		s1.eng=80;
		s1.math=78;
		// s1=name,kor,eng,math
		student s2=new student();
		s2.name="심지";
		s2.kor=23;
		s2.eng=25;
		s2.math=27;
		// s2=name,kor,eng,math
		student s3=new student();
		s3.name="각개";
		s3.kor=45;
		s3.eng=47;
		s3.math=49;
		// s3=name,kor,eng,math
		
		System.out.println(s1.name+" "+s1.kor+" "+s1.eng+" "+s1.math);
		System.out.println(s2.name+" "+s2.kor+" "+s2.eng+" "+s2.math);
		System.out.println(s3.name+" "+s3.kor+" "+s3.eng+" "+s3.math);
		// 세 개의 메모리가 다르다.
		
		
	}
}
	































