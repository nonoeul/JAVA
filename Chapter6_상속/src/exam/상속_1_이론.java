package exam;
/*
 * 	생성자
 *		1. 클래스명과 동일
 *		2. 멤버변수에 대한 초기화
 *		3. 생성자가 없는 경우에는 자동으로 컴파일러 기본생성자를 추가한다. // 기본생성자 : 매개변수가 없는 생성자 
 *		
 * 예)
 * 	class A
 * 	{
 * 		public A(){}
 * 	}
 * 	class A
 * 	{
 * 		public A(){}
 * 	}
 * 		4. 모든 클래스는 생성자를 1개 이상을 가지고 있다. 
 *		5. 생성자는 객체를 생성할 떄 호출되는 메소드이다. // 생성자는 항상 앞에 new를 붙여서 써야한다. 
 *		   new 생성자() 
 *		6. 리턴형이 존재하지 않는다. 
 * 		7. 생성자는 필요시에는 여러 개를 만들 수 있다. 
 * 		   --------------------------------
 * 			= 오버로딩을 지원한다.(중복메소드 정의)
 * 			  한개의 메소드 이름으로 여러 개 기능을 생성한다. 
 * 		오버로딩 vs 오버라이딩
 * 		오버로딩 = new // 오버라이딩 = modiify 
 * 		오버로딩(new), 오버라이딩(modify)이 사실을 알자. 
 * 			  
 * 	오버로딩 (조건)
 * 		1, 메소드명이 도일 // 메소드명은 동일 하나의 메소도로 비슷한 기능을 하는 메소드를 생성 
 * 		2, 한개의 클래스에서 만든다.	// 한 개의 클래스에서만 
 * 		3, 매개변수의 갯수나 데이터형이 다르다
 * 		4, 리턴형은 관계 없다. 
 * 	예)
 * 		==== void method() , void method(int a)
 * 		class A
 * 		{
 * 			A(){} // 추가되지 않는다. // 생성자가 아무것도 존재하지 않을 때 맨 처음 클래스 인경우 
 * 			// 기본생성자를 자동으로 만들어준다. 하지만 아래에 생성자가 3개나 있을므로 자동 생성X
 * 			A(int a){}	==> 생성자 
 * 			A(double a){}	==> 생성자 
 * 			A(int a.int b){}	==> 생성자 
 * 		}
 * 		A a=new A(); ==> 오류 발생
 * 
 * 		** 생성자는 초기화를 담당 
 * 		초기화만 하는 것이 아니라 초기화 이외에도
 * 		1) 시작과 동시에 처리하는 일이 있는 경우 
 * 		= 윈도우 디자인, 웹 메인, 자동 로그인, 오라클 연결, 서버 연결
 * 		모든 자바 가장 먼저 시작되는게 메소드는 생성자이다. 
 * 		가장 먼저 호출되는 메소드는 생성자이다.
 * 		Member main[] = new Member[] // new생성자를 만들어주는 것처럼 말이다. 
 * 
 * 		**** new (객체 생성방법) ****
 * 		class A
 * 		1) A a=new A	// 메모리 할당 
 * 		--------------------------------------
 * 		2) A a=Class.forName("A").newInstance()
 * 		3) A a=	A.newInstance()
 *		------------------------ 리플렉션, 스프링에서 많이 쓰임 		
 * 		메소드 : 기능을 수행 , 다른 클래스와 연결을 할 때 사용 
 * 		메소드 제작방법 (형식) 
 * 		[접근지정어(public)][제어어] 리턴형 메소드명(매개변수목록) => 선언부
 * 		{
 * 			구현부
 * 		}
 * 
 * 		1. 선언부
 * 			= 접근지정어 : public , default 
 * 			= 제어어	: static, final, abstract 
 * 			static	: public static
 * 					  => 객체마다 공통으로 사용되는 기능 (데이터베이스 연결)
 * 
 * 			final	: public final = 오버라이딩이 안되는 상태 
 * 					=> 수정이 불가능하다
 * 					=> 종단메소드 , 종단클래스
 * 			// 오버라이딩이 안된다? => 수정이 불가능하다 Math, String, System = 모든 메소드를 그대로 사용한다. 
 * 			// 수정이 전부 불가능하다, Math, String, System 있는 그대로 갖다써야지 쓸 수 있다. 
 * 
 * 			abstract: 선언만 하는 메소드 ==> 구현 (프로그램에 맞게 구현해서 사용)
 * 					  버튼 클릭 
 * 					  => 추상클래스 / 인터페이스에서 등장한다.
 * 						=> 인터페이스는 스프링에 기반이다. 스프링에 매우 중요하다.  
 * 		리턴형 : 	사용자 요청 처리한 결과값 
 * 				한개만 사용이 가능하다. 
 * 				=> 여러 개의 값이 있는 경우 // 두 가지 형태를 가지고 있다.
 * 				   1. 같은 데이터형이 여러 개일 경우 (배열)	 ==> 컬렉션 
 * 					배열 (고정직) / 컬렉션(가변)
 * 				   2. 다른 데이터형이 여러 개일 경우 (클래스) 	 
 * 					Member , Movie , Music처럼 클래스로 묶어서 나중에 조립해서 사용한다.
 * 				=> 한 개의 결과값이 나왔을 때 : 기본형, String 
 * 				=> 결과값이 없는 경우 : 메소드 자체에서 처리 => void 
 * 		매개변수 : 여러개 사용이 가능 , 사용자 요청한 값 // 매개변수를 최소화시켜주는 것이 중요하다.
 * 		-- 매개변수가 3개 이상이면 배열,클래스를 통해서 처리한다.  
 * 				 
 * 		2. 구현부 : 	변수가 선언이 되면 => 지역변수 (메소드 종료와 동시에 사라진다)
 * 				  	지역변수: 	1. 초기화가 안되있기 때문에 반드시 초기화 후에 사용해야 한다. 	
 * 							2. 지역변수 블록이 끝나면 사라진다. 블록내에서만 유효 
 * 
 * 		*** 변수/메소드 2개만 만들 줄 알면 끝난다.
 * 		---------------------------------
 * 		this : 	클래스마다 this를 가지고 있다. (static)
 * 				자신의 객체 주소를 가지고 있다.
 * 		class A
 * 		
 * 		A a=new A();
 * 		=> JVM : this=a;
 * 
 * 		class A
 * 		{
 * 			A(){
 * 				this가 존재 
 * 				display() // display 호출 가능 // 원래는 this.display 앞에 this가 생략이 되어 있다.   
 * 			}
 * 			
 * 			void display()
 * 			{
 * 				this가 존재 
 * 			}
 * 				
 * 			static void aaa()
 * 			{
 * 				this가 존재하지 않는다. static 메소드는 공유변수로 모든 메모리 속에 공유되기 때문에
 * 				this를 가지고 있지 않는다. this가 필요없다.!! 
 * 				A a=new A(); ===> 객체 생성후 사용, 바로 사용 가능 
 * 			}
 * 		}
 * 		==> 멤버변수, 멤버메소드. 생성자 ==> 클래스 소속 , 마음대로 갖다가 쓸 수 있다.
 * 			==> 클래스내에서는 마음대로 쓸 수 있다. 클래스내에서만 사용 가능 
 * 		==> static : 공유를 하고 있기 떄문에 혼자서 쓰는게 아니다. 객체 생성후 사용 
 * 		A a=new A(); => this	
 * 		A b=new A(); => this	
 * 		---------------------------------
 * 		this는 멤버변수와 지역변수의 구분 
 * 		class A
 * 		{
 * 			int age;
 * 			public void SetAge(int age)
 * 			{
 * 				age=age; // 지역변수가 우선순위 SetAge(int age)가 우선순위
 * 				// 매개변수를 포함하고 있다. 지역변수 
 * 				?? 구분하기위해서는 this를 사용한다,
 * 				this.age=age
 * 				------- this.age는 class A의 int age 값 인스턴스 변수이다. 
 * 			}
 * 		}
 * 				
 * 		
 * 			
 * 
 * 
 */
public class 상속_1_이론 {

}









































