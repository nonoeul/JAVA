/*
 * 	class ClassName
 * 	{
 * 		---------------
 * 		변수
 * 		1) 멤버변수 (인스턴스 변수 => new 메모리에 저장 형식)
 * 		 형식 [접근 지정어] 데이터형 변수명 = 값(디폴트)
 * 			  int a;	=> 0
 * 			  int a=10;	// 명시적인 초기화 
 * 			  	
 * 				(구현)
 * 				=> int a;
 * 			  1. a=10; => clase에서는 구현 할 수 없다.
 * 				 class 내에서는 변수의 값을 넣고 초기값을 지정하려면 
 * 				 변수의 초기화를 해주는 (생성자)를 만든다.
 * 			  2. 생성시점 : new를 이용해서 메모리 공간 확보 , 
 * 				 소멸시점 : 객체 = null이거나 사용하지 않는 경우  
 * 						  ---------------------가비지 컬렉션 (메모리 회수)
 * 			  => 가장 많이 사용되는 변수 (여러개 지정)
 * 				 class A
 * 				 {
 * 					int age; // 0	
 * 					String name; // null
 * 				 }
 * 					A a=new A() => age,name
 * 						--- new를 쓸 떄마다 다른 공간이 생성된다. 인스턴스 변수 
 * 					 ----- 객체, 인스턴스(메모리에 저장된 상태)
 * 					 => a.age 접근방식
 * 					 => a.name // a안에 있는 변수를 사용하기 위해서 a에 메모리에 접근해야한다. 
 * 					A b=new A() => age,name
 * 						---
 * 					 => b.age
 * 					 => b.name
 * 					========================> class는 한개만 설계 ====> 저장을 new를 이용해서 여러 개 +		
 *				a(주소값 100) age=25, name=심청
 *				b(주소값 200) age=17, name=길동
 *				 b=a
 *				 b=a를, 대입하면 b가 주소값(200)값을 가비지컬렉션에 버려버리고
 *				 a의 메모리와 안에 있는 갑을 대입한다. ====> 메모리 주소의 복구가 어렵다.
 *				 => 한 번 넣으면 복구가 안된다. // 데이터주소의 복구가 어렵다.  
 *
 *				static vs int
 *				static : 공유변수로 모든 값이 동일해진다.
 *				int    : 인스턴스 변수는 별개의 공간을 만들어서 동일한 값을 지정해도
 *						 다른 메모리상에 있으면 따로 저장된다. 변경도 용이

 * 		2) 정적변수(클래스 변수, 공유변수) static을 사용하는 것 
 * 		   멤버변수와 다르게 따로따로 저장해주는 것이 한 개의 공간만 생성해서 사용 
 * 		   => 공유변수 : 오라클 
 * 		   형식) [접근지정어] static [데이터형] [변수명] = 값(디폴트값)
 * 				int => 0
 * 				double => 0.0
 * 				boolean => false
 * 				String, 배열 클래스 => null (주소가 저징이 안된 상태)
 * 				=> 생성시점 : 컴파일에 의해서 메모리에 자동 저장 
 * 				=> new가 없어도 상관없다, 왜냐하면 공유변수 즉 모든 메모리에 공유 되기 때문에
 * 				   인스턴스는 new를 통해 각 메소드에 객체를 만들어줘야 하는데 정적변수는 그러지 않아도 됀다.
 * 
 * 		접근지정어 public private protect default 
 * 		---------------
 * 		생성자
 * 			1) 객체가 생성될 떄 호출 메소드
 * 				A a=new A()
 * 					-------- 생성자
 * 
 * 			2) 특징
 * 				= 클래스명과 동일
 * 				= 리턴타입이 없다. 
 * 				= 생성자가 없는 경우 컴파일에서 자동적으로 단 한 개만 매개변수가 없는
 * 				  기본 생성자를 만들어주는데, 이것을 기본생성자라고 한다. 
 * 				= 멤버변수의 초기화를 시킬 때 많이 쓰인다. 
 * 				= 생성자는 여러 개를 사용할 수도 있다. (한 개의 클래스에 여러 개 사용)
 * 				= 데이터베이스 연결, 네트워크 연결, 윈도우...
 * 				= 자동 추가 
 * 				  ------- import java.lang.*
 * 				  		  ------------------ String , Math , System..
 * 				  class A extends Object
 * 				  // class 뒤에는 Object(객체의 최상급)이 생략이 되어 있다.
 * 				  생성자 : 기본 생성자()를 자동으로 만들어준다.
 * 				  void일 경우 return 컴파일러가 없으면 자동으로 추가해준다. 
 * 				  = 모든 메서드는 맨 아래에 return이 존재하지만 void 같은 경우는 return을 생략할 수 있다. 
 * 		 		class A	
 * 				{
 * 					A(){} 			 = 생성자이다
 * 					void A(){}		 = 일반변수이다. void 리턴값이 있기 때문이다. // 리턴값이 있으면 생성자이다.
 * 					A(int a){}		 = 생성자이다
 * 					A(int a,int b){} = 생성자이다. 
 * 				}
 * 
 * 			3) 역할
 * 				= 시작과 동시에 처리 
 * 				  예) 자동 로그인  / 오라클 연결 / 서버 연결 // 
 * 				  시작과 동시에 연결한다. 
 * 				= 멤버변수의 초기화를 담당한다.
 * 				= 생성자는 필요할때만 사용 (생략할 수 있다.)
 * 				---- 컴파일러에 의해 자동을 추가해준다. 
 * 				  class A
 * 					{
 * 						int a=10
 * 						A()
 * 						{
 * 							// 파일읽기, 크롤링할 때 
 * 							init() = init은 초기화를 할 떄 사용하는 함수인데
 * 							보통은 생성자를 만들어줘서 초기화를 한다. 
 * 							= 구현해서 초기화할때 
 * 						}
 * 					}
 * 		------------------------------
 * 		메소드 :
 * 			1) 역할 		=> 다른 클래스 와 통신 (연결)
 * 			2) 수정, 추가
 * 			3) 반복제거
 * 			4) 구조적인 프로그램 (단락을 나눠서 처리)		-> 오류, 처리
 * 			5) 메소드 호출시마다 처음부터 끝가지
 * 			6) 구성요소
 * 				결과값을 리턴으로 사용한다.
 * 				기본형 	: int, double, char, boolean, long
 * 				배열[]	: int[], double[]	
 * 				클래스	: 다른 데이터형 여러개 
 * 				=> 클래스는 배열로 사용이 가능하다 (데이터형)
 * 				기본형은 자바에서 지원을 해준다.
 * 				클래스를 만들 때 자바에서 지원하는 것만으로는 모든 프로그램을 제작할 수 없다.
 * 				그래서 프로그래머가 만들어서 처리 => 사용자 정의 데이터형
 * 
 * 		메소드명 : 식별자 => 변수, 클래스, 인터페이스, 메소드 
 * 				=> 변수, 메소드는 소문자
 * 				=> 클래스, 인터페이스 대문자
 * 				=> 문자길이는 상관없다 (3~10) => 7
 * 				class A Class B Class C
 * 				=> 한글은 가급적으로 사용하지 않는다.
 * 
 * 		매개변수 (사용자 요청)
 * 		*** 사용자의 요청값을 받아서 요청 처리 결과를 도와준다.
 * 		***	최소화 시킨다. (3개 이상이면 => 배열, 클래스)
 * 		예)
 * 			정수 10개를 보내주고 정렬후 달라
 * 			(int a,int b....)
 * 			(int[] arr)
 * 			회원가입
 * 			(String 
 * 
 * 		메소드 유형
 * 			=> 리턴타입 (X,한 개만 존재) => 여러개 (배열, 클래스)
 * 			=> 매개변수 (X,한 개이상)
 * 		--------------
 * 		리턴타입	매개변수
 * 		--------------
 * 		  O		  O
 * 		--------------
 * 		  O		  X
 * 		--------------
 * 		  X		  O
 * 		--------------	
 * 		  X		  X
 * 		--------------
 * 		------------------
 * 		메소드 형식
 * 		[접근지정어][옵션] 리턴타입 메소드명(매개변수...) 선언부
 * 		{			   ------- 결과값--------
 * 			옵션: static , abstract, final 
 * 			구현부 
 * 			연산/제어
 * 			return 값; => void일 경우에는 생략이 가능 
 * 		}
 * }
 * 
 * 
 */
public class 생성자_1 {
	// 자동으로 추가 
	public static void main(String[] args) {
		생성자_1 a=new 생성자_1();
		System.out.println(a.toString());
		// toString을 쓸 수 있는 것은 모든 클래스에는 자동으로 Object를 상속한다.
		// class 생성자_1 
		
				
		
		
		
	}
}







































